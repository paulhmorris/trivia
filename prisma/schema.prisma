datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  notes    Note[]
  games    Game[]
  teams    Team[]
  teamId   String?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Team {
  id      String @id @default(cuid())
  name    String
  game    Game?  @relation(fields: [gameId], references: [id])
  players User[]

  gameId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Game {
  id                       String  @id @default(cuid())
  name                     String?
  teams                    Team[]
  rounds                   Round[]
  creator                  User?   @relation(fields: [userId], references: [id])
  publicCode               String  @unique
  numberOfRounds           Int
  defaultPointsPerQuestion Int     @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
}

model Round {
  id        String     @id @default(cuid())
  name      String?
  game      Game       @relation(fields: [gameId], references: [id])
  questions Question[]

  gameId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id       String @id @default(cuid())
  points   Int    @default(1)
  answer   String
  question String
  round    Round? @relation(fields: [roundId], references: [id])

  roundId   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}
